(()=>{"use strict";let t;let e="PAComponent",a="PAInterval",s="PACount",i="PAPathAxis",n="PANormalAxis",r="PAScale",o="PAPathList";function l(t){return"X"===t||"Y"===t||"Z"===t}let h={interval:{value:1e3,min:10,max:9999999},count:{value:10,min:1,max:100},pathAxis:"X",normalAxis:"Z",scale:{value:1,min:.01,max:1e3}};GeomLib.createIdentityMatrix4();let c=GeomLib.createVector3d(0,0,1),p=GeomLib.createPoint3d(0,0,0);function u(t){return t.getType()===KEntityType.GroupInstance}function m(t){return t.getType()===KEntityType.Face}function d(t,e){let a=e.getStartVertex(),s=e.getStartVertex();return a.getKey()===t.getKey()?{connected:!0,reversed:!1}:s.getKey()===t.getKey()?{connected:!0,reversed:!0}:{connected:!1,reversed:!1}}function g(t){let e;let a=[],s=0,i=c;for(let n=0;n<t.length;n++){let r=t[n],o=function(t){let e=t.getBoundedCurve(),a=[];return e&&(e.direction?a=[e.startPoint,e.endPoint]:e.circle&&(a=e.getApproximatePointsByAngle())),a}(r.curve);if(o.length){let t=function(t){let e=t.getBoundedCurve();if(e&&e.circle)return e.normal}(r.curve)||e;e=t,t&&(i=t);for(let e=0;e<o.length;e++){let i=o[e];if(0===e){if(0===n){let t=o[e+1];a.push({point:o[0],direction:t.subtracted(i).normalized(),accumulateLength:s})}}else{let n=o[e-1],r=i.subtracted(n).normalized();s+=n.distanceTo(i),a.push({point:i,direction:r,normal:t,accumulateLength:s})}}}}for(let t of a){if(t.normal)break;t.normal=i}return{pathPointPoses:a,totalLength:s}}function v(t,e){let{count:a,interval:s,scale:i}=e,n=[],r=GeomLib.createScaleMatrix4(i.value,i.value,i.value),o=0,l=0*s.value;for(let e=0;e<t.length;e++){let i;let{point:h,normal:u,direction:m,accumulateLength:d}=t[e],g=0===e?-1:t[e-1].accumulateLength,v=u||c;for(;o<a.value&&l>g&&l<=d;){let t=h.added(m.multiplied(l-d));i=GeomLib.createTranslationMatrix4(t.x,t.y,t.z).multiplied(GeomLib.createAlignCCSMatrix4(m,v.cross(m).normalized(),v,p)).multiplied(r),n.push(i),l=++o*s.value}}return n}var P=function(t,e,a,s){return new(a||(a=Promise))(function(i,n){function r(t){try{l(s.next(t))}catch(t){n(t)}}function o(t){try{l(s.throw(t))}catch(t){n(t)}}function l(t){var e;t.done?i(t.value):((e=t.value)instanceof a?e:new a(function(t){t(e)})).then(r,o)}l((s=s.apply(t,e||[])).next())})};let y=app.getActiveDesign(),f=new class{constructor(){this.components=[],this.path=[],this.pathPointPoses=[],this.totalLength=0,this.pathArrayParams=h}getPathArrayParams(){return this.pathArrayParams}setModel(t){var h;let c=null===(h=t.getGroupDefinition())||void 0===h?void 0:h.getSubGroupInstances().reduce((t,a)=>{let s=Number.parseInt(a.getCustomProperty(e));return Number.isFinite(s)&&t.push({instance:a,index:s}),t},[]).sort((t,e)=>t.index-e.index);if(null==c?void 0:c.length){let e=Number.parseInt(t.getCustomProperty(s)),h=t.getCustomProperty(a),p=h.startsWith("m"),u=p?Number.parseFloat(h.slice(1)):Number.parseFloat(h),m=t.getCustomProperty(i),d=t.getCustomProperty(n),v=t.getCustomProperty(r),P=v.startsWith("m"),y=P?Number.parseFloat(v.slice(1)):Number.parseFloat(v);if(Number.isFinite(e)&&e>1&&Number.isFinite(u)&&Number.isFinite(y)&&l(m)&&l(d)){let a=t.getCustomProperty(o),s=new Map,i=!0,n=[];for(let t of a.split("&")){let e=t.split("-");if(2===e.length){let t=s.get(e[0]);t&&n.push({curve:t,reversed:"1"===e[1]})}i=!1;break}if(i&&n.length){this.model=t,this.components=c,this.path=n;let{pathPointPoses:a,totalLength:s}=this.pathPointPoses.length?{pathPointPoses:this.pathPointPoses,totalLength:this.totalLength}:g(this.path);return this.pathPointPoses=a,this.totalLength=s,this.pathArrayParams={interval:{value:u,min:10,max:s/e},intervalLocked:p,count:{value:e,min:1,max:Math.floor(s/u)},pathAxis:m,normalAxis:d,scale:{value:y,min:.01,max:1e3},scaleLocked:P},!0}}}return!1}clearModel(){this.model=void 0,this.path=[],this.components=[],this.pathPointPoses=[],this.totalLength=0,this.pathArrayParams=h}doOperation(t,a=!0){var s;return P(this,void 0,void 0,function*(){if(!this.model)return!1;let{pathPointPoses:i,totalLength:n}=this.pathPointPoses.length?{pathPointPoses:this.pathPointPoses,totalLength:this.totalLength}:g(this.path);this.pathPointPoses=i,this.totalLength=n;let r=v(i,t),o=(yield y.activateGroupInstance(this.model)).isSuccess;if(a)for(let t of this.components){let e=t.instance.getTransform(),a=t.instance.getLocalBoundingBox().center,s=GeomLib.createTranslationMatrix4(-a.x,-a.y,-a.z).multiplied(e.inversed());if(!y.transformGroupInstances([t.instance],r[t.index].multiplied(s)).isSuccess){o=!1;break}}if(t.count>this.pathArrayParams.count){let a=this.components[0].instance,i=a.getTransform(),n=a.getLocalBoundingBox().center,l=GeomLib.createTranslationMatrix4(-n.x,-n.y,-n.z).multiplied(i.inversed()),h=null===(s=y.bulkCopyGroupInstances([a],[r.slice(this.pathArrayParams.count.value).map(t=>t.multiplied(l))]))||void 0===s?void 0:s.addedInstances;if(null==h?void 0:h.length){for(let a=this.pathArrayParams.count.value;a<t.count.value;a++)o=o&&h[a-this.pathArrayParams.count.value].setCustomProperty(e,`${a}`).isSuccess;o&&(this.components=[...this.components,...h.map((t,e)=>({instance:t,index:this.pathArrayParams.count.value+e}))])}else o=!1}else{let e=this.components.findIndex(e=>e.index===t.count.value);for(let t of this.components.slice(e))o=o&&y.removeGroupInstance(t.instance).isSuccess;o&&this.components.splice(e,this.components.length-e+1)}return o&&(yield y.deactivateGroupInstance()).isSuccess})}updateInterval(t){return P(this,void 0,void 0,function*(){if(this.model&&this.components.length&&this.path.length&&this.pathArrayParams&&t!==this.pathArrayParams.interval.value){let{scale:e,count:s,scaleLocked:i}=this.pathArrayParams,n=this.components[0].instance.getLocalBoundingBox(),o=t*s.value>this.totalLength?Math.floor(this.totalLength/t):s.value,l=i?e.value:n.width>t/2?t/2/n.width:e.value;y.startOperation();let h=Object.assign(Object.assign({},this.pathArrayParams),{interval:{value:t,min:10,max:this.totalLength/o},count:{value:o,min:1,max:Math.floor(this.totalLength/t)},scale:Object.assign(Object.assign({},e),{value:l})}),c=yield this.doOperation(h);return c?(y.commitOperation(),this.model.setCustomProperty(a,`${t}`),i||l===e.value||this.model.setCustomProperty(r,`${l}`),this.pathArrayParams=h):y.abortOperation(),c}})}updateCount(t){return P(this,void 0,void 0,function*(){if(this.model&&this.components.length&&this.path.length&&this.pathArrayParams&&t!==this.pathArrayParams.count.value){let{interval:s,intervalLocked:i,count:n,scale:o,scaleLocked:l}=this.pathArrayParams,h=this.pathPointPoses.length?this.totalLength:g(this.path).totalLength;this.totalLength=h;let c=this.components[0].instance.getLocalBoundingBox(),p=t>n.value&&this.totalLength>s.value*t||t<n.value&&!i,u=p?this.totalLength/t:s.value,m=p||!l&&c.width>u/2,d=m?u/2/c.width:o.value;y.startOperation();let v=Object.assign(Object.assign({},this.pathArrayParams),{interval:{value:u,min:10,max:h/t},count:Object.assign(Object.assign({},this.pathArrayParams.count),{value:t}),scale:Object.assign(Object.assign({},this.pathArrayParams.scale),{value:d})}),P=yield this.doOperation(v,p||m);return P?(y.commitOperation(),this.model.setCustomProperty(e,`${t}`),p&&this.model.setCustomProperty(a,`${u}`),m&&this.model.setCustomProperty(r,`${d}`),this.pathArrayParams=v):y.abortOperation(),P}})}updatePathAxis(t){}updateNormalAxis(t){}updateScale(t){return P(this,void 0,void 0,function*(){if(this.model&&this.components.length&&this.path.length&&this.pathArrayParams&&t!==this.pathArrayParams.scale.value){y.startOperation();let e=Object.assign(Object.assign({},this.pathArrayParams),{scale:Object.assign(Object.assign({},this.pathArrayParams.scale),{value:t})}),a=yield this.doOperation(e);return a?(y.commitOperation(),this.model.setCustomProperty(r,`${t}`),this.pathArrayParams=e):y.abortOperation(),a}})}onToolActive(){}onToolDeactive(){}onMouseMove(t,e){}onLButtonUp(t,e){}onRButtonUp(t,e){app.deactivateCustomTool(this)}onLButtonDbClick(t,e){}allowUsingInference(){return!1}onKeyDown(t){}onKeyUp(t){}},A=new class{constructor(){this.path=[],this.pathPointPoses=[],this.totalLength=0,this.pathArrayParams=h}onToolActive(){let t=app.getSelection(),e=app.getToolHelper();e.enablePicking(!0),e.setDefaultSelectBehavior(KSelectBehavior.ADD);let a=t.getAllEntities();1===a.length&&(u(a[0])||m(a[0]))?this.model=a[0]:t.clear()}onToolDeactive(){let t=app.getPluginUI();this.tryCommit(),t.postMessage({type:"leavePathArrayTool"},"*")}onMouseMove(t,e){}onLButtonUp(t,e){let a=app.getSelection(),s=app.getPickHelper().pickByPoint(t.clientX(),t.clientY()).getAllPicked();if(s.length){if(this.model){let t=!1;if(s[0].getType()===KEntityType.AuxiliaryBoundedCurve){let e=s[0];if(this.path.length){let a;let s=this.path[this.path.length-1],i=s.reversed?s.curve.getStartVertex():s.curve.getEndVertex();1===this.path.length?!(a=d(i,e)).connected&&(a=d(i=s.curve.getStartVertex(),e)).connected&&(s.reversed=!s.reversed):a=d(i,e),a.connected&&(this.path.push({curve:e,reversed:a.reversed}),t=!0)}else this.path.push({curve:e,reversed:!1}),t=!0}t?a.remove(s.slice(1)):a.remove(s)}else this.model=s[0]}else this.tryCommit()}tryCommit(){var t,l,h;if(this.model&&this.path.length){let c;let p=app.getActiveDesign();if(p.startOperation(),u(this.model)?c=this.model:m(this.model)&&(c=null===(t=p.makeGroup([this.model],[],[]))||void 0===t?void 0:t.addedInstance),c){let{pathPointPoses:t,totalLength:u}=this.pathPointPoses.length?{pathPointPoses:this.pathPointPoses,totalLength:this.totalLength}:g(this.path);this.pathPointPoses=t,this.totalLength=u;let m=[c],d=u/(this.pathArrayParams.count.value-1),P=function(t){let e=t.getLocalBoundingBox(),a=t.getTransform();return[GeomLib.createVector3d(e.width,0,0),GeomLib.createVector3d(0,e.height,0),GeomLib.createVector3d(0,0,e.depth)].map(t=>t.appliedMatrix4(a).length)}(c),y=P[0]>d/2?d/2/P[0]:1,f=c.getLocalBoundingBox(),A=c.getTransform(),b=f.center,x=GeomLib.createTranslationMatrix4(-b.x,-b.y,-b.z).multiplied(A.inversed()),C=Object.assign(Object.assign({},this.pathArrayParams),{interval:Object.assign(Object.assign({},this.pathArrayParams.interval),{value:d}),scale:Object.assign(Object.assign({},this.pathArrayParams.scale),{value:y})}),L=v(this.pathPointPoses,C),O=p.transformGroupInstances([c],L[0].multiplied(x)).isSuccess;if(O){let t=L[0].inversed(),u=null===(l=p.bulkCopyGroupInstances([c],[L.slice(1).map(e=>e.multiplied(t))]))||void 0===l?void 0:l.addedInstances;if(null==u?void 0:u.length){m.push(...u);for(let t=0;t<m.length;t++)O=O&&m[t].setCustomProperty(e,`${t}`).isSuccess;let t=null===(h=p.makeGroup([],m,this.path.map(t=>t.curve)))||void 0===h?void 0:h.addedInstance;if(t){let e=this.path.length;O=(O=(O=(O=(O=(O=O&&t.setCustomProperty(a,`${d}`).isSuccess)&&t.setCustomProperty(s,`${this.pathArrayParams.count.value}`).isSuccess)&&t.setCustomProperty(i,`${this.pathArrayParams.pathAxis}`).isSuccess)&&t.setCustomProperty(n,`${this.pathArrayParams.normalAxis}`).isSuccess)&&t.setCustomProperty(r,`${y}`).isSuccess)&&t.setCustomProperty(o,this.path.reduce((t,a,s)=>(t+=`${a.curve.getKey()}-${a.reversed?1:0}`,s<e-1&&(t+="&"),t),"")).isSuccess;let l=app.getSelection();l.clear(),l.add([t]),O?(this.pathArrayParams=C,p.commitOperation()):p.abortOperation()}else p.abortOperation()}else p.abortOperation()}app.deactivateCustomTool(this,!1)}else p.abortOperation()}this.clear()}clear(){this.model=void 0,this.path=[],this.pathPointPoses=[],this.totalLength=0,this.pathArrayParams=Object.assign(Object.assign({},h),{count:this.pathArrayParams.count})}onRButtonUp(t,e){app.deactivateCustomTool(this)}onLButtonDbClick(t,e){}allowUsingInference(){return!1}onKeyDown(t){}onKeyUp(t){}},b=app.getPluginUI();b.resize(240,700),b.mount(),b.onMessage(function(e){var a,s,i,n;return a=this,s=void 0,i=void 0,n=function*(){try{if("activatePathArray"===e.type)app.activateCustomTool(A,!1),t=A;else if("deActivatePathArray"===e.type)app.deactivateCustomTool(A),t=void 0;else if("pathArrayParamsChange"===e.type){let a;t!==f&&(app.activateCustomTool(f,!1),t=f);let s=e.value;"intervalChange"===e.subtype?a=yield f.updateInterval(s):"countChange"===e.type?a=yield f.updateCount(s):"scaleChange"===e.type&&(a=yield f.updateScale(s)),a&&b.postMessage({type:"pathArrayParamsChanged",pathArrayParams:f.getPathArrayParams()})}}catch(t){console.error(t),closePlugin()}},new(i||(i=Promise))(function(t,e){function r(t){try{l(n.next(t))}catch(t){e(t)}}function o(t){try{l(n.throw(t))}catch(t){e(t)}}function l(e){var a;e.done?t(e.value):((a=e.value)instanceof i?a:new i(function(t){t(a)})).then(r,o)}l((n=n.apply(a,s||[])).next())})});let x=app.getSelection();x.addObserver({onSelectionChange:()=>{let t=x.getAllEntities();1===t.length&&u(t[0])&&f.setModel(t[0])&&b.postMessage({type:"pathArrayParamsChanged",pathArrayParams:f.getPathArrayParams()})}})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,